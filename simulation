class Gate:
    def __init__(self, name, inputs, output):
        self.name = name
        self.inputs = inputs
        self.output = output
        self.delay = 1  # Default delay for all gates

    def evaluate(self, input_values):
        raise NotImplementedError("Must be implemented by subclasses")

class AndGate(Gate):
    def evaluate(self, input_values):
        return all(input_values)

class OrGate(Gate):
    def evaluate(self, input_values):
        return any(input_values)

class NotGate(Gate):
    def evaluate(self, input_values):
        return not input_values[0]

class Wire:
    def __init__(self, name):
        self.name = name
        self.value = 0
        self.connections = []

    def connect(self, gate):
        self.connections.append(gate)

    def set_value(self, new_value, event_queue, time):
        if self.value != new_value:
            self.value = new_value
            for gate in self.connections:
                event_queue.add_event(time + gate.delay, gate)
import heapq

class EventQueue:
    def __init__(self):
        self.queue = []

    def add_event(self, time, gate):
        heapq.heappush(self.queue, (time, gate))

    def next_event(self):
        return heapq.heappop(self.queue)

    def is_empty(self):
        return len(self.queue) == 0

def parse_verilog(file_path):
    # Simplified parser for demonstration, assuming basic gate and wire format
    gates = []
    wires = {}

    with open(file_path, 'r') as f:
        for line in f:
            tokens = line.split()
            if tokens[0] in ['and', 'or', 'not']:  # Parsing gate
                gate_type = tokens[0]
                output_wire = tokens[1]
                input_wires = tokens[2:]
                
                if gate_type == 'and':
                    gates.append(AndGate(output_wire, input_wires, output_wire))
                elif gate_type == 'or':
                    gates.append(OrGate(output_wire, input_wires, output_wire))
                elif gate_type == 'not':
                    gates.append(NotGate(output_wire, input_wires, output_wire))
                # Add other gates similarly

                # Create wires if not already created
                if output_wire not in wires:
                    wires[output_wire] = Wire(output_wire)
                for w in input_wires:
                    if w not in wires:
                        wires[w] = Wire(w)

    return gates, wires

def parse_stimuli(file_path, wires, event_queue):
    with open(file_path, 'r') as f:
        for line in f:
            if line.startswith('#'):
                tokens = line.split()
                time = int(tokens[0][1:])  # Remove '#' from delay
                input_wire = tokens[1].split('=')[0]
                new_value = int(tokens[1].split('=')[1].replace(';', ''))
                
                wire = wires[input_wire]
                wire.set_value(new_value, event_queue, time)

def run_simulation(gates, wires, event_queue, output_file):
    with open(output_file, 'w') as f:
        while not event_queue.is_empty():
            time, gate = event_queue.next_event()
            input_values = [wires[input_name].value for input_name in gate.inputs]
            new_value = gate.evaluate(input_values)
            
            output_wire = wires[gate.output]
            output_wire.set_value(new_value, event_queue, time)

            # Record the event in the output file
            f.write(f"{time}, {gate.output}, {new_value}\n")

if __name__ == "__main__":
    gates, wires = parse_verilog("circuit.v")
    event_queue = EventQueue()
    parse_stimuli("circuit.stim", wires, event_queue)
    run_simulation(gates, wires, event_queue, "circuit.sim")
